@page "/create"
@page "/edit/{Id}"
@page "/copy/{Id}/{IsCopy:bool}"
@page "/details/{Id}/{ReadOnly:bool}"
@using Spreadsheet.Providers
@using Spreadsheet.Services
@using Spreadsheet.Web.WebApp.Helpers
@using Spreadsheet.Data.Dto
@using Microsoft.Extensions.Logging
@using Blazored.FluentValidation

@inject ISpreadsheetMetadataProvider _spreadsheetMetadataProvider
@inject ISpreadsheetMetadataService _spreadsheetMetadataService
@inject State _state
@inject NavigationManager _uriHelper
@inject IJSRuntime _jsRuntime
@inject ILogger<SpreadsheetPage> _logger;

<div class="container mt-3">
    @if (Spreadsheet == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <section class="card mt-2">
            <div class="card-body">
                <div class="row">
                    <div class="col-4 btn-group ms-3">
                        <a href="/" class="btn btn-primary me-3">Back to list</a>
                        @if (ReadOnly && !_state.Saving)
                        {
                            <button @onclick="() => Edit(Id)" class="btn btn-primary me-3">Edit</button>
                            <button @onclick="() => CopySpreadsheet(Id)" class="btn btn-primary me-3">Create copy</button>
                        }
                        else if (!IsCopy && Id != null)
                        {
                            <button @onclick="() => Details(Id)" class="btn btn-primary">Details</button>
                        }
                    </div>
            
                </div>
            </div>
        </section>

        <EditForm Model="@Spreadsheet" 
                  OnValidSubmit="Save" 
                  OnInvalidSubmit="ScrollToTop"
                  class="py-5">

            <FluentValidationValidator 
                DisableAssemblyScanning="@true" 
                @ref="@_spreadsheetValidator"/>
            <section class="card mt-2">
                <div class="card-body">
                    <div class="@Layout.FormRow">
                        <div class="@Layout.LabelContainer">
                            <label class="@Layout.Label">Name: </label>
                        </div>
                        <div class="@Layout.InputContainer">
                            <InputText disabled="@Disabled" 
                                       @bind-Value="Spreadsheet.Name" 
                                       @oninput="e => Spreadsheet.Name = InputFormatter.ToUpperCase(e)"
                                       @onblur="Save"
                                       class="form-control" />
                            <ValidationMessage For="@(() => Spreadsheet.Name)"/>
                        </div>
                    </div>
                    <div class="@Layout.FormRow">
                        <div class="@Layout.LabelContainer">
                            <label class="@Layout.Label">Spreadsheet id (Google): </label>
                        </div>
                        <div class="@Layout.InputContainer">
                            <InputText disabled="@Disabled" 
                                       @bind-Value="Spreadsheet.SpreadsheetId" 
                                       @oninput="e => Spreadsheet.SpreadsheetId = InputFormatter.Trim(e)"
                                       @onblur="Save"
                                       class="form-control"/>
                            <ValidationMessage For="@(() => Spreadsheet.SpreadsheetId)"/>
                        </div>
                    </div>
                    <div class="@Layout.FormRow">
                        <div class="@Layout.LabelContainer">
                            <label class="@Layout.Label">Valid from: </label>
                        </div>
                        <div class="@Layout.InputContainer">
                            <InputDate disabled="@Disabled" 
                                       @bind-Value="Spreadsheet.ValidFrom"
                                       @onblur="Save"
                                       class="form-control"/>
                            <ValidationMessage For="@(() => Spreadsheet.ValidFrom)"/>
                        </div>
                    </div>
                    <div class="@Layout.FormRow">
                        <div class="@Layout.LabelContainer">
                            <label class="@Layout.Label">Valid to: </label>
                        </div>
                        <div class="@Layout.InputContainer">
                            <InputDate 
                                disabled="@Disabled" 
                                @bind-Value="Spreadsheet.ValidTo"
                                @onblur="Save"
                                class="form-control"/>
                            <ValidationMessage For="@(() => Spreadsheet.ValidTo)"/>
                        </div>
                    </div>
                </div>
            </section>

            <section class="row mt-5">
                <header class="col-12">
                    <h2 class="float-start ms-3">
                        Tabs
                    </h2>
                    <button
                        disabled="@Disabled"
                        class="btn btn-primary float-end me-3"
                        type="button" @onclick="AddTab">
                        Add tab
                    </button>
                </header>
                <div class="col-3">
                    
                </div>
            </section>
            <div class="row">
                <div class="col-12">
                    <ValidationMessage For="@(() => Spreadsheet.Tabs)"/>
                </div>
            </div>

            @foreach (var spreadsheetTab in Spreadsheet.Tabs)
            {
                <section class="card mt-2">
                    <div class="card-body">
                        <div class="@Layout.FormRow">
                            <div class="@Layout.LabelContainer">
                                <label class="@Layout.Label">Name: </label>
                            </div>
                            <div class="@Layout.InputContainer">
                                <InputText disabled="@Disabled"  
                                           @bind-Value="spreadsheetTab.Name" 
                                           @onchange="e => spreadsheetTab.Name = InputFormatter.ToUpperCase(e)"
                                           @onblur="Save"
                                           class="form-control"/>
                                <ValidationMessage For="@(() => spreadsheetTab.Name)"/>
                            </div>
                            <div class="col-1 offset-3">
                                <button disabled="@Disabled"
                                        class="btn btn-danger"
                                        @onclick="() => RemoveTab(spreadsheetTab)">
                                    Remove
                                </button>
                            </div>
                        </div>
                        <div class="@Layout.FormRow">
                            <div class="@Layout.LabelContainer">
                                <label class="@Layout.Label">First column:</label>
                            </div>
                            <div class="@Layout.InputContainer">
                                <InputText 
                                    disabled="@Disabled" 
                                    @bind-Value="spreadsheetTab.FirstColumn" 
                                    @onchange="e => spreadsheetTab.FirstColumn = InputFormatter.ToUpperCase(e)"
                                    @onblur="Save"
                                    class="form-control"/>
                                <ValidationMessage For="@(() => spreadsheetTab.FirstColumn)"/>
                            </div>
                        </div>
                        <div class="@Layout.FormRow">
                            <div class="@Layout.LabelContainer">
                                <label class="@Layout.Label">Last column:</label>
                            </div>
                            <div class="@Layout.InputContainer">
                                <InputText disabled="@Disabled" 
                                           @bind-Value="spreadsheetTab.LastColumn" 
                                           @onchange="e => spreadsheetTab.LastColumn = InputFormatter.ToUpperCase(e)"
                                           @onblur="Save"
                                           class="form-control"/>
                                <ValidationMessage For="@(() => spreadsheetTab.LastColumn)"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <ValidationMessage For="@(() => spreadsheetTab.Rows)"/>
                            </div>
                        </div>

                        <table class="table-striped mt-2">
                            @foreach (var row in spreadsheetTab.Rows)
                            {
                                <tr>
                                    <td class="pb-2">
                                        <InputText disabled="@Disabled" 
                                                   placeholder="Row key" 
                                                   @bind-Value="row.RowKey" 
                                                   @onchange="e => row.RowKey = InputFormatter.ToUpperCase(e)"
                                                   @onblur="Save"
                                                   class="form-control"/>
                                        <ValidationMessage For="@(() => row.RowKey)"/>
                                    </td>
                                    <td class="ps-3 pb-2"> 
                                        <InputText disabled="@Disabled" 
                                                   placeholder="Tags" 
                                                   @bind-Value="row.Tags"
                                                   @onblur="Save"
                                                   class="form-control"/>
                                        <ValidationMessage For="@(() => row.Tags)"/>
                                    </td>
                                    <td class="ps-3 pb-2">
                                        <button disabled="@Disabled"
                                                class="btn btn-danger"
                                                @onclick="() => RemoveRow(spreadsheetTab, row)">
                                            Remove row
                                        </button>
                                    </td>
                                </tr>
                            }
                            <tr>
                                <td colspan="3">
                                    <button disabled="@Disabled"
                                            class="btn btn-primary mt-2"
                                            type="button"
                                            @onclick="() => AddRow(spreadsheetTab)">
                                        Add row
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </section>
            }
        </EditForm>
    }

</div>


@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsCopy { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private bool Disabled => ReadOnly || _state.Saving;

    private SpreadsheetMetadataDto Spreadsheet { get; set; }
    private FluentValidationValidator _spreadsheetValidator;

    protected override async Task OnInitializedAsync()
    {
        if (Spreadsheet != null)
            return;

        if (!string.IsNullOrEmpty(Id))
        {
            if (IsCopy)
            {
                Spreadsheet = await _spreadsheetMetadataService.InitializeSpreadsheetMetadataCopy(Id);
            }
            else
            {
                Spreadsheet = await _spreadsheetMetadataProvider.GetSpreadsheet(Id);
            }
        }
        else
        {
            Spreadsheet = _spreadsheetMetadataService.InitializeEmptySpreadsheetMetadata();
        }

        StateHasChanged();
    }

    private async Task Save()
    {
        if (ReadOnly)
        {
            return;
        }
        
        _state.SetSaving(true);
        _logger.LogInformation("Saving changes in spreadsheet");
        await _spreadsheetMetadataService.CreateOrUpdateSpreadsheetMetadata(Spreadsheet);
        _logger.LogInformation("Saved changes in spreadsheet");

        _state.SetSaving(false);
    }

    private void AddTab()
    {
        Spreadsheet.Tabs.Add(new SpreadsheetMetadataDto.Tab());
        _spreadsheetValidator.Validate(x => x.IncludeProperties(nameof(SpreadsheetMetadataDto.Tabs)));
    }

    private void AddRow(SpreadsheetMetadataDto.Tab spreadsheetTab)
    {
        spreadsheetTab.Rows.Add(new SpreadsheetMetadataDto.Row());
        _spreadsheetValidator.Validate(x => x.IncludeProperties(nameof(SpreadsheetMetadataDto.Tab.Rows)));
    }

    private void RemoveTab(SpreadsheetMetadataDto.Tab spreadsheetTab)
    {
        Spreadsheet.Tabs.Remove(spreadsheetTab);
        _spreadsheetValidator.Validate(x => x.IncludeProperties(nameof(SpreadsheetMetadataDto.Tabs)));
    }

    private void RemoveRow(SpreadsheetMetadataDto.Tab spreadsheetTab, SpreadsheetMetadataDto.Row row)
    {
        spreadsheetTab.Rows.Remove(row);
        _spreadsheetValidator.Validate(x => x.IncludeProperties(nameof(SpreadsheetMetadataDto.Tab.Rows)));
    }

    private async Task ScrollToTop()
    {
        await _jsRuntime.InvokeAsync<bool>("scrollToElementId", "elementId");
    }
    
    private void CopySpreadsheet(string id)
    {
        _uriHelper.NavigateTo($"/copy/{id}/{true}/");
    }

    private void Details(string id)
    {
        _uriHelper.NavigateTo($"/details/{id}/{true}");
    }

    private void Edit(string id)
    {
        _uriHelper.NavigateTo($"/edit/{id}");
    }

}